<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\DB;

/**
 * App\Models\Admin\AdminUser
 *
 * @package App\Models\Admin
 * @author Qasim <15750783791@163.com>
 * @date 2019-05-14
 * @property int $id
 * @property string $username 用户名
 * @property string $password 用户密码
 * @property string $last_login_ip 最后登录IP
 * @property int $status 用户状态 1正常 0禁用
 * @property string|null $deleted_at 软删除
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser query()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereLastLoginIp($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereLastLoginTime($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser wherePassword($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereUsername($value)
 * @mixin \Eloquent
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Admin\AdminRole[] $roles
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Admin\AdminUser onlyTrashed()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Admin\AdminUser withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Admin\AdminUser withoutTrashed()
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Admin\AdminUserRole[] $userRoles
 * @property string $nickname 用户昵称
 * @property int $login_times 登录次数
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereLoginTimes($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminUser whereNickname($value)
 * @property-read int|null $roles_count
 * @property-read int|null $user_roles_count
 */
class AdminUser extends Authenticatable
{

    use SoftDeletes;

    /**
     * @var array
     */
    protected $fillable = [
        'last_login_ip', 'status', 'username', 'password', 'nickname', 'login_times',
    ];

    public static function boot()
    {

        parent::boot(); // TODO: Change the autogenerated stub

        //当用户删除的时候  连带用户角色一起删除
        static::deleted(function(AdminUser $adminUser) {

            //获取删除前的数据
            $adminUserOriginal = $adminUser->getOriginal();

            //是彻底删除的话 关联模型删除
            if($adminUserOriginal['deleted_at']){

                //用户关联的角色删除
                $adminUser->userRoles()->delete();

            }

        });

    }

    /*
     * 用户有哪些角色
     */
    public function userRoles()
    {

        return $this->hasMany(AdminUserRole::class, 'admin_user_id', 'id');

    }

    /*
     * 用户有哪些角色
     */
    public function roles()
    {

        return $this->belongsToMany(AdminRole::class, AdminUserRole::class, 'admin_user_id', 'role_id');

    }

    /*
     * 是否有某个角色
     */
    public function isInRoles(Collection $roles)
    {

        return !! $roles->intersect($this->roles)->count();

    }

    /*
     * 是否有权限
     */
    public function hasAdminMenuPermission(AdminMenu $adminMenu)
    {

        return $this->isInRoles($adminMenu->roles);

    }

    /*
     * 给用户分配角色
     */
    public function assignRole($permission)
    {

        return $this->roles()->save($permission);

    }

    /*
     * 删除之前无效的角色
     */
    public function deleteRole($permission)
    {

        return $this->roles()->detach($permission);

    }



}
