<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\Admin\AdminMenu
 *
 * @package App\Models\Admin
 * @author Qasim <15750783791@163.com>
 * @date 2019-05-14
 * @property int $id
 * @property int $parent_id 父菜单id
 * @property int $status 状态;1:显示,0:不显示
 * @property int $sort 排序
 * @property string $route 应用路由
 * @property string $name 菜单名称
 * @property string $icon 菜单图标
 * @property string $remark 备注
 * @property \Illuminate\Support\Carbon|null $deleted_at 软删除
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Admin\AdminMenu[] $allChildren
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Admin\AdminMenu[] $children
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu newQuery()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Admin\AdminMenu onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu parents($pid = 0)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu query()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu sort($field = 'sort', $rule = 'desc')
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu status($status = 1)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereIcon($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereParentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereRemark($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereRoute($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereSort($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Admin\AdminMenu whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Admin\AdminMenu withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Admin\AdminMenu withoutTrashed()
 * @mixin \Eloquent
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Admin\AdminRole[] $roles
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Admin\AdminRoleMenu[] $MenuRoles
 * @property-read int|null $menu_roles_count
 * @property-read int|null $all_children_count
 * @property-read int|null $children_count
 * @property-read int|null $roles_count
 */
class AdminMenu extends Base
{

    use SoftDeletes;

    /**
     * 可写入的字段
     * @var array
     */
    protected $fillable = [
        'parent_id', 'status', 'route', 'name', 'icon', 'remark','sort', 'deleted'
    ];

    public static function boot()
    {

        parent::boot(); // TODO: Change the autogenerated stub

        //当菜单删除的时候  与菜单关联的角色一起删除
        static::deleted(function(AdminMenu $adminMenu) {

            //获取删除前的数据
            $adminMenuOriginal = $adminMenu->getOriginal();

            //是彻底删除的话 关联模型删除
            if($adminMenuOriginal['deleted_at']){

                //菜单关联的角色删除
                $adminMenu->MenuRoles()->delete();

            }

        });

    }

    /**
     * 菜单 关联的角色
     */
    public function MenuRoles()
    {

        return $this->hasMany(AdminRoleMenu::class, 'menu_id', 'id');

    }

    /**
     * 获取所有父类
     * @param Builder $query
     * @param int $pid 默认0
     * @return Builder
     */
    public function scopeParents(Builder $query, int $pid = 0)
    {
        return $query->where('parent_id', $pid);
    }

    /**
     * 获取是否菜单显示的数据
     * @param Builder $query
     * @param int $status 1显示|0隐藏  默认1
     * @return Builder
     */
    public function scopeStatus(Builder $query, int $status = 1)
    {

        return $query->where('status', $status);

    }

    /**
     * 排序
     * @param Builder $query
     * @param string $field 字段名  默认按sort字段desc排序
     * @param string $rule 排序规则 asc|desc
     * @return Builder
     */
    public function scopeSort(Builder $query, string $field = 'sort', string $rule = 'desc')
    {
        return $query->orderBy($field, $rule);
    }

    /**
     * 单个分类所有下级
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function children()
    {

        return $this->hasMany($this, 'parent_id', 'id');

    }

    /**
     * 单个父类所有下级  无限极
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function allChildren()
    {

        return $this->children()->with( 'allChildren');

    }

    /*
     * 菜单权限属于哪些角色
     */
    public function roles()
    {

        return $this->belongsToMany(AdminRole::class, AdminRoleMenu::class, 'menu_id', 'role_id');

    }

}
